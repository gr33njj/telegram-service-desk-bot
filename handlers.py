import logging
import os
from telegram import Update
from telegram.ext import ContextTypes
from keyboards import get_main_menu, get_computer_menu, get_mfu_menu, get_edo_menu, get_confirm_menu, get_description_menu
from config import CHANNEL_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - Configuring logging
logging.basicConfig(filename="logs/bot.log", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - User data storage
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start - The /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã –Ø –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_menu()
    )
    logging.info(f"User {user.id} started bot")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ - Keystroke processing
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id  

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - Categories
    if query.data == "computer":
        user_data[user_id] = {"category": "–ö–æ–º–ø—å—é—Ç–µ—Ä"}
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_computer_menu())
    elif query.data == "mfu":
        user_data[user_id] = {"category": "–ú–§–£"}
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_mfu_menu())
    elif query.data == "edo":
        user_data[user_id] = {"category": "–≠–î–û"}
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_edo_menu())
    elif query.data == "other":
        user_data[user_id] = {"category": "–î—Ä—É–≥–æ–µ", "subcategory": "–î—Ä—É–≥–æ–µ"}
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ö–æ–º–ø—å—é—Ç–µ—Ä–∞ - Subcategories for Computer
    elif query.data == "comp_power":
        user_data[user_id]["subcategory"] = "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –Ω–∞ –∫–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞? (Windows –∏–ª–∏ Astra Linux?) (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "comp_slow":
        user_data[user_id]["subcategory"] = "–ú–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –æ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞ —Å —Ä–∞–±–æ—Ç–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º? (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "comp_net":
        user_data[user_id]["subcategory"] = "–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –≥–¥–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π? (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "comp_other":
        user_data[user_id]["subcategory"] = "–î—Ä—É–≥–æ–µ"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ú–§–£ - Subcategories for MFPs
    elif query.data == "mfu_jam":
        user_data[user_id]["subcategory"] = "–ó–∞–º—è—Ç–∏–µ –±—É–º–∞–≥–∏"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –Ω–∞ –∫–∞–∫–æ–º –ú–§–£ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞? (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "mfu_quality":
        user_data[user_id]["subcategory"] = "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –Ω–∞ –∫–∞–∫–æ–º –ú–§–£ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞? –í –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ –µ—Å—Ç—å —Ç–æ–Ω–µ—Ä –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞? (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "mfu_connect":
        user_data[user_id]["subcategory"] = "–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "mfu_other":
        user_data[user_id]["subcategory"] = "–î—Ä—É–≥–æ–µ"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≠–î–û - Subcategories for EDI
    elif query.data == "edo_pass":
        user_data[user_id]["subcategory"] = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, —É –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ (–§–ò–û, –æ—Ç–¥–µ–ª) (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "edo_block":
        user_data[user_id]["subcategory"] = "–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, —É –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ (–§–ò–û, –æ—Ç–¥–µ–ª) (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "edo_sign":
        user_data[user_id]["subcategory"] = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å—å—é"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())
    elif query.data == "edo_other":
        user_data[user_id]["subcategory"] = "–î—Ä—É–≥–æ–µ"
        await query.edit_message_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ö–ê–ö –° –¢–û–ë–û–ô –°–í–Ø–ó–ê–¢–¨–°–Ø –ò–õ–ò –ù–û–ú–ï–† –ö–ê–ë–ò–ù–ï–¢–ê, –ì–î–ï –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨! ‚úèÔ∏è):", reply_markup=get_description_menu())                
    # –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π... - Add similarly for other subcategories....
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é - Return to the main menu
    elif query.data == "back_to_main":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())
        if user_id in user_data:
            del user_data[user_id]  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ - Clearing data on return

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è) - Return to subcategory (from description)
    elif query.data == "back_to_subcategory":
        category = user_data[user_id]["category"]
        if category == "–ö–æ–º–ø—å—é—Ç–µ—Ä":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_computer_menu())
        elif category == "–ú–§–£":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_mfu_menu())
        elif category == "–≠–î–û":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_edo_menu())
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())
            del user_data[user_id]

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ - Confirm or cancel
    elif query.data == "send":
        data = user_data[user_id]
        # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ticket_id –∏–∑ —Ñ–∞–π–ª–∞ - Read last ticket_id from file
        ticket_file = "ticket_id.txt"
        if os.path.exists(ticket_file):
            with open(ticket_file, "r") as f:
                ticket_id = int(f.read().strip()) + 1
        else:
            ticket_id = 1
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ticket_id - Saving a new ticket_id
        with open(ticket_file, "w") as f:
            f.write(str(ticket_id))

        ticket_text = (
            f"–ó–∞—è–≤–∫–∞ #{ticket_id}\n"
            f"üë§ –ò–º—è: {query.from_user.username or query.from_user.first_name}\n"
            f"üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']} -> {data['subcategory']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ—Ç')}\n"
            f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {data.get('room', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üì∏ –§–æ—Ç–æ: {'–µ—Å—Ç—å' if data.get('photo') else '–Ω–µ—Ç'}"
        )
        await context.bot.send_message(chat_id=CHANNEL_ID, text=ticket_text)
        if data.get("photo"):
            await context.bot.send_photo(chat_id=CHANNEL_ID, photo=data["photo"])
        await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ‚úÖ")
        logging.info(f"Ticket #{ticket_id} sent by {user_id}")
        del user_data[user_id]  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - Data cleansing
    elif query.data == "cancel":
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? /start")
        del user_data[user_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ - Processing of text messages and photos
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        if update.message.text:
            if update.message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                user_data[user_id]["description"] = "–Ω–µ—Ç"
            else:
                user_data[user_id]["description"] = update.message.text
        if update.message.photo:
            user_data[user_id]["photo"] = update.message.photo[-1].file_id
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤—å –∑–∞—è–≤–∫—É:", reply_markup=get_confirm_menu())